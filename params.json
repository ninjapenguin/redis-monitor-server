{"name":"Redis-monitor-server","tagline":"Redis Monitor Server","body":"Redis Monitor Server\r\n====================\r\n\r\nRedis Monior is a stand alone server written to monitor one or multiple redis servers. Its primary use is to allow you to automate the testing of applications that interface directly with [Redis](http://www.redis.io)\r\n\r\n## TL;DR;\r\n\r\n```python\r\nfrom monitor import RedisMonitor\r\n\r\nrm = RedisMonitor(redis_ports=[6370])\r\n\r\n# execute your code..\r\n\r\nrm.get_last_command()\t# return the last command run against the redis server\r\nrm.get_all_commands()\t# return all commands run against the redis server\r\nrm.reset()\t\t\t\t# reset the command history\r\n...\r\n```\r\n\r\n## Contents\r\n * [Download] (https://github.com/ninjapenguin/redis-monitor-server/#download)\r\n * [Installation] (https://github.com/ninjapenguin/redis-monitor-server/#installation)\r\n * [Quickstart] (https://github.com/ninjapenguin/redis-monitor-server/#quickstart)\r\n\r\n## Download\r\n\r\nDownload one liner:\r\n\r\n```bash\r\ngit clone https://github.com/ninjapenguin/redis-monitor-server.git\r\n````\r\n\r\n## Installation\r\n\r\nTo install dependencies\r\n\r\n ```bash\r\n pip install -r requirements.txt\r\n ````\r\n\r\n## Quickstart\r\n\r\n### Option 1: Bootstrapping via python RedisMonitor class\r\n\r\n```python\r\nfrom monitor import RedisMonitor\r\n\r\nrm = RedisMonitor(redis_ports=[6997,6998])\r\n\r\n# do a test\r\nrm.get_last_command()\t# returns the last command run accross all instances\r\nrm.get_last_command_by_instance(6997)\t# returns the last command run on instance @ port 6997\r\nrm.get_all_commands()\t# returns all commands run to date\r\nrm.get_command_counts()\t# returns a dict of port => number of commands recorded\r\n\r\nrm.reset()\t# reset the current lists..\r\n\r\n# do another test...\r\n\r\nrm.shutdown()\r\n````\r\n\r\n### Option 2: Run the server manually and connect externally\r\n\r\nTo start the redis monitoring server listening on two local ports:\r\n\r\n```bash\r\npython monitor.py --redis_port 6997 6998\r\n````\r\n\r\nYou are then able to communicate with server using zmq REQ socket directly:\r\n\r\n#### Python\r\n\r\n```python\r\nimport zmq\r\ncontext = zmq.Context()\r\n\r\nsocket = context.socket(zmq.REQ)\r\nsocket.connect(\"tcp://localhost:5559\")\r\nsocket.send('last')\r\nresponse = socket.recv()\r\n# response == u'keys *'\r\n````\r\n\r\n#### Lua\r\n\r\n```lua\r\nrequire \"zmq\"\r\nlocal context = zmq.init(1)\r\n\r\nlocal socket = context:socket(zmq.REQ)\r\nsocket:connect(\"tcp://localhost:5559\")\r\nsocket:send('last')\r\nlocal response = socket:recv()\r\n````\r\n\r\n#### PHP\r\n```php\r\n$context = new ZMQContext();\r\n\r\n$socket = new ZMQSocket($context, ZMQ::SOCKET_REQ);\r\n$socket->connect(\"tcp://localhost:5555\");\r\n$socket->send(\"last\");\r\n$response = $socket->recv();\r\n````","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}